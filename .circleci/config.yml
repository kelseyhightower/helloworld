# would be nice if this worked
# filters:
#   tb_filter: &tb_filter
#     branches:
#       only: ["/PR-.*/"] # would be nice if this worked
#   tbd_filter: &tbd_filter
#     branches:
#       only: ["master"]

# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
# Also check https://circleci.com/docs/2.0/configuration-reference/
# https://circleci.com/docs/2.0/deployment_integrations/
version: 2
jobs:
  build:
    docker:
      - image: circleci/golang:1.8
    working_directory: &work_dir /go/src/github.com/jnbnyc/helloworld
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: container build
          command: docker build .
      - run: docker images

  test:
    docker:
      - image: circleci/golang:1.8
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4
    environment:
      TEST_RESULTS: &test_results_dir /tmp/test-results
    working_directory: *work_dir
    steps:
      - checkout
      - run: mkdir -p $TEST_RESULTS
      - run: go get github.com/jstemmer/go-junit-report

      - run: go get -v -t -d ./...
      - run: go test -v ./... -bench . -benchmem -cover 2>&1 | tee ${TEST_RESULTS}/report.out
      - run: go-junit-report -set-exit-code < ${TEST_RESULTS}/report.out > ${TEST_RESULTS}/junit.xml
      - store_artifacts:
          path: /tmp/test-results/junit.xml # would be nice to use yaml alias (*test_results_dir) or env var (${TEST_RESULTS}) here
          destination: reports/junit.xml # filename is needed here
      - store_test_results:
          path: *test_results_dir

  deploy:
    docker:
      - image: busybox:latest
    steps:
      - run:
          name: Deploy app
          command: echo faking it

workflows:
  version: 2
  test_and_build:
    jobs:
      - test:
          filters: &tb_filter
            branches:
              ignore: ["master"]
      - build:
          context: &context org-global
          filters:
            <<: *tb_filter
  test_build_deploy:
    jobs:
      - test:
          filters: &tbd_filter
            branches:
              only: ["master"]
      - build:
          context: &context org-global
          filters:
            <<: *tbd_filter
      - deploy:
          context: *context
          filters:
            <<: *tbd_filter
          requires: ["build", "test"]
