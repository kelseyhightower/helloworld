# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2
jobs:
  build:
    docker:
      - image: circleci/golang:1.8
    working_directory: &work_dir /go/src/github.com/jnbnyc/helloworld
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
        name: container build
        command: docker build .
      - run: docker images

  test:
    docker:
      # specify the version
      - image: circleci/golang:1.8

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4
    environment:
      TEST_RESULTS: &test_results_dir /tmp/test-results
    working_directory: *work_dir
    steps:
      - checkout
      - run: mkdir -p $TEST_RESULTS
      - run: go get github.com/jstemmer/go-junit-report

      - run: go get -v -t -d ./...
      - run: go test -v ./... -bench . -benchmem -cover 2>&1 | tee ${TEST_RESULTS}/report.out
      - run: go-junit-report -set-exit-code < ${TEST_RESULTS}/report.out > ${TEST_RESULTS}/junit.xml
      - store_artifacts:
          path: /tmp/test-results/junit.xml # would be nice to use yaml alias (*test_results_dir) or env var (${TEST_RESULTS}) here
          destination: reports/junit.xml # filename is needed here
      - store_test_results:
          path: *test_results_dir

  deploy:
    docker:
      - image: busybox:latest
    steps:
      - run: echo faking it

workflows:
  version: 2
  test:
    jobs:
      - test
  test_and_build:
    jobs:
      - test: &tb_filter
          filters:
            branches:
              only: ["/PR-.*/"]
      - build:
          <<: *tb_filter
          requires: ["test"]
  test_build_deploy:
    jobs:
      - test: &tbd_filter
          filters:
            branches:
              only: ["master"]
      - build:
          <<: *tbd_filter
          requires: ["test"]
      - deploy:
          <<: *tbd_filter
          requires: ["build"]
